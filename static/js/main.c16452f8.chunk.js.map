{"version":3,"sources":["Objects.png","LOA_1/B1_3_1.png","logo.svg","Timer.js","ShowImage.js","Counting.js","Monitoring.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","useState","seconds","setSeconds","isActive","setIsActive","useEffect","interval","setInterval","clearInterval","className","ShowImage","props","switchImage","bind","state","currentImage","images","task_img","obj_img","this","length","setState","timer","src","alt","React","Component","Counting","fragile_count","setFragile","normal_count","setNormal","oversize_count","setOversize","onClick","Monitoring","button0","button1","button2","button3","button4","number","console","log","clicked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c16452f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Objects.d44ffab0.png\";","module.exports = __webpack_public_path__ + \"static/media/B1_3_1.5de161ce.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\r\n\r\nconst Timer = () => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [isActive, setIsActive] = useState(true);\r\n\r\n  function toggle() {\r\n    setIsActive(!isActive);\r\n  }\r\n\r\n  function reset() {\r\n    setSeconds(0);\r\n    setIsActive(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setSeconds(seconds => seconds + 1);\r\n      }, 1000);\r\n    }\r\n    if (seconds == 15) {\r\n      setIsActive(false);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isActive, seconds]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"timer\">\r\n        <h3>{seconds}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;","import React from \"react\";\r\n\r\nimport obj_img from './Objects.png';\r\nimport Timer from './Timer';\r\nimport task_img from './LOA_1/B1_3_1.png';\r\n\r\n\r\nclass ShowImage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.switchImage = this.switchImage.bind(this);\r\n    this.state = {\r\n      currentImage: 0,\r\n      images: [\r\n        task_img, obj_img\r\n      ],\r\n      seconds: 0\r\n    };\r\n  }\r\n\r\n  switchImage() {\r\n    if (this.state.currentImage < this.state.images.length - 1) {\r\n      this.setState({\r\n        currentImage: this.state.currentImage + 1\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentImage: 0\r\n      });\r\n    }\r\n    this.setState({seconds: this.state.seconds + 1});\r\n    if(this.state.seconds > 7){\r\n        clearInterval(this.timer);\r\n    }\r\n    return this.currentImage;\r\n  }\r\n\r\n  componentDidMount() {\r\n        this.timer = setInterval(this.switchImage, 2000);     \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"image_style\">\r\n          <Timer></Timer>\r\n        <img className=\"image_style\"\r\n          src={this.state.images[this.state.currentImage]}\r\n          alt=\"cleaning images\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ShowImage;\r\n","import React, {useState} from 'react';\r\n\r\nfunction Counting(){\r\n\r\n    const [fragile_count, setFragile] = useState(0);\r\n    const [normal_count, setNormal] = useState(0);\r\n    const [oversize_count, setOversize] = useState(0);\r\n\r\n    function addFragile() {\r\n        setFragile(fragile_count+1);\r\n    }\r\n\r\n    function emptyFragile(){\r\n        setFragile(0);\r\n    }\r\n\r\n    function addNormal() {\r\n        setNormal(normal_count+1);\r\n    }\r\n\r\n    function emptyNormal() {\r\n        setNormal(0);\r\n    }\r\n\r\n    function addOversize() {\r\n        setOversize(oversize_count+1);\r\n    }\r\n\r\n    function emptyOversize() {\r\n        setOversize(0);\r\n    }\r\n\r\n    return(\r\n        <div className=\"counting_style\">\r\n        <h1>Fragile</h1>\r\n        <h1>{fragile_count}</h1>\r\n        <div className=\"count_btns\">\r\n        <button onClick={addFragile}><p>Add</p></button>\r\n        <button onClick={emptyFragile}><p>New Bin</p></button>\r\n        </div>\r\n        <h1>Normal</h1>\r\n        <h1>{normal_count}</h1>\r\n        <button onClick={addNormal}><p>Add</p></button>\r\n        <button onClick={emptyNormal}><p>New Bin</p></button>\r\n\r\n        <h1>Oversize</h1>\r\n        < h1>{oversize_count}</h1>\r\n        <button onClick={addOversize}><p>Add</p></button>\r\n        <button onClick={emptyOversize}><p>New Bin</p></button>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Counting;","import React from 'react';\r\n\r\n\r\nclass Monitoring extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            button0: false,\r\n            button1: false,\r\n            button2: false,\r\n            button3: false,\r\n            button4: false\r\n        }\r\n    }\r\n    \r\n    clicked(number){\r\n        switch(number){\r\n            case 0:\r\n                this.setState({button0:true});\r\n                this.setState({button1:false});\r\n                this.setState({button2:false});\r\n                this.setState({button3:false});\r\n                this.setState({button4:false});\r\n                break;\r\n            case 1:\r\n                this.setState({button0:false});\r\n                this.setState({button1:true});\r\n                this.setState({button2:false});\r\n                this.setState({button3:false});\r\n                this.setState({button4:false});\r\n                break;\r\n            case 2:\r\n                this.setState({button0:false});\r\n                this.setState({button1:false});\r\n                this.setState({button2:true});\r\n                this.setState({button3:false});\r\n                this.setState({button4:false});\r\n                break;\r\n            case 3:\r\n                this.setState({button0:false});\r\n                this.setState({button1:false});\r\n                this.setState({button2:false});\r\n                this.setState({button3:true});\r\n                this.setState({button4:false});\r\n                break;\r\n            case 4:\r\n                this.setState({button0:false});\r\n                this.setState({button1:false});\r\n                this.setState({button2:false});\r\n                this.setState({button3:false});\r\n                this.setState({button4:true});\r\n                break;\r\n        }\r\n        console.log(number);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"monitoring_style\">\r\n                <button className={this.state.button0 ? \"clickedBtn\" : \"unclickedBtn\"} onClick={() => this.clicked(0)}>0</button>\r\n                <button className={this.state.button1 ? \"clickedBtn\" : \"unclickedBtn\"} onClick={() => this.clicked(1)}>1</button>\r\n                <button className={this.state.button2 ? \"clickedBtn\" : \"unclickedBtn\"} onClick={() => this.clicked(2)}>2</button>\r\n                <button className={this.state.button3 ? \"clickedBtn\" : \"unclickedBtn\"} onClick={() => this.clicked(3)}>3</button>\r\n                <button className={this.state.button4 ? \"clickedBtn\" : \"unclickedBtn\"} onClick={() => this.clicked(4)}>4</button>\r\n            </div>\r\n        )\r\n        }\r\n    \r\n};\r\n\r\n\r\nexport default Monitoring;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ShowImage from './ShowImage';\nimport Counting from './Counting';\nimport Monitoring from './Monitoring';\n\nfunction App() {\n  return (\n    <div className=\"task_style\">\n    <ShowImage></ShowImage>\n    <Monitoring></Monitoring>\n    <Counting></Counting>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}